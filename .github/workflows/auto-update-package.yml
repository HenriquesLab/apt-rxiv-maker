name: 🔄 Auto-Update APT Package

on:
  repository_dispatch:
    types: [version-update]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to update to (e.g., v1.6.1)'
        required: true
        type: string
      clean_version:
        description: 'Clean version without v prefix (e.g., 1.6.1)'
        required: true
        type: string
      dry_run:
        description: 'Dry run mode (show what would be done)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

env:
  DEBIAN_FRONTEND: noninteractive
  PACKAGE_NAME: rxiv-maker

jobs:
  update-package:
    name: 📦 Update APT Package
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Extract version information
        id: version
        run: |
          # Get version from dispatch event or manual input
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            VERSION="${{ github.event.client_payload.version }}"
            CLEAN_VERSION="${{ github.event.client_payload.clean_version }}"
            TRIGGER_SOURCE="${{ github.event.client_payload.source }}"
            TRIGGERED_BY="${{ github.event.client_payload.triggered_by }}"
            PYPI_URL="${{ github.event.client_payload.pypi_url }}"
          else
            VERSION="${{ github.event.inputs.version }}"
            CLEAN_VERSION="${{ github.event.inputs.clean_version }}"
            TRIGGER_SOURCE="manual"
            TRIGGERED_BY="${{ github.actor }}"
            PYPI_URL="https://pypi.org/project/rxiv-maker/$CLEAN_VERSION/"
          fi

          # Validate version format
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          echo "trigger_source=$TRIGGER_SOURCE" >> $GITHUB_OUTPUT
          echo "triggered_by=$TRIGGERED_BY" >> $GITHUB_OUTPUT
          echo "pypi_url=$PYPI_URL" >> $GITHUB_OUTPUT

          echo "📦 Updating package to version: $VERSION ($CLEAN_VERSION)"
          echo "🎯 Triggered by: $TRIGGERED_BY ($TRIGGER_SOURCE)"

      - name: Check current package version
        id: current
        run: |
          if [[ ! -f "debian/changelog" ]]; then
            echo "❌ Debian changelog not found"
            exit 1
          fi

          # Extract current version from changelog
          CURRENT_VERSION=$(head -n1 debian/changelog | grep -o '([^)]*)' | tr -d '()')
          if [[ -z "$CURRENT_VERSION" ]]; then
            echo "❌ Could not extract current version from changelog"
            exit 1
          fi

          # Extract just the version number (remove Debian revision if present)
          CURRENT_BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/-[^-]*$//')

          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "current_base_version=$CURRENT_BASE_VERSION" >> $GITHUB_OUTPUT
          echo "📋 Current package version: $CURRENT_VERSION (base: $CURRENT_BASE_VERSION)"

          # Check if update is needed
          if [[ "$CURRENT_BASE_VERSION" == "${{ steps.version.outputs.clean_version }}" ]]; then
            echo "✅ Package is already at version ${{ steps.version.outputs.clean_version }}"
            echo "update_needed=false" >> $GITHUB_OUTPUT
          else
            echo "🔄 Update needed: $CURRENT_BASE_VERSION → ${{ steps.version.outputs.clean_version }}"
            echo "update_needed=true" >> $GITHUB_OUTPUT
          fi

      - name: Install build dependencies
        if: steps.current.outputs.update_needed == 'true'
        run: |
          echo "🔧 Installing build dependencies..."
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            debhelper \
            devscripts \
            dh-python \
            python3-dev \
            python3-setuptools \
            python3-wheel \
            python3-all \
            python3-hatchling \
            pybuild-plugin-pyproject \
            lintian \
            dput-ng \
            gnupg

      - name: Verify PyPI package availability
        id: pypi
        if: steps.current.outputs.update_needed == 'true'
        run: |
          echo "🔍 Verifying PyPI package availability for version ${{ steps.version.outputs.clean_version }}"

          # Wait for PyPI propagation with retry logic
          for attempt in {1..5}; do
            echo "🎯 Attempt $attempt to verify PyPI package..."

            PYPI_API_URL="https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/${{ steps.version.outputs.clean_version }}/json"
            if curl -f -s "$PYPI_API_URL" > /dev/null; then
              echo "✅ PyPI package available on attempt $attempt"
              echo "package_available=true" >> $GITHUB_OUTPUT
              break
            else
              echo "❌ PyPI package not available on attempt $attempt"
              if [ $attempt -eq 5 ]; then
                echo "❌ PyPI package not available after 5 attempts"
                echo "⚠️ Package may still be propagating - will continue with caution"
                echo "package_available=false" >> $GITHUB_OUTPUT
              else
                echo "⏳ Waiting 30 seconds before retry..."
                sleep 30
              fi
            fi
          done

      - name: Update Debian package files
        id: update
        if: steps.current.outputs.update_needed == 'true'
        run: |
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            echo "🧪 DRY RUN: Would update package with:"
            echo "  Version: ${{ steps.current.outputs.current_base_version }} → ${{ steps.version.outputs.clean_version }}"
            echo "  Changelog entry with new version"
            echo "  Control file dependencies verification"
            exit 0
          fi

          echo "🔧 Updating Debian package files..."

          # Generate new Debian version (base version + revision)
          NEW_DEBIAN_VERSION="${{ steps.version.outputs.clean_version }}-1"
          echo "debian_version=$NEW_DEBIAN_VERSION" >> $GITHUB_OUTPUT

          # Update changelog using dch
          export DEBEMAIL="github-actions[bot]@users.noreply.github.com"
          export DEBFULLNAME="GitHub Actions"

          # Create new changelog entry
          dch --newversion "$NEW_DEBIAN_VERSION" \
              --distribution unstable \
              "Automated update to upstream version ${{ steps.version.outputs.version }}"

          echo "✅ Changelog updated to version $NEW_DEBIAN_VERSION"

          # Verify control file dependencies are still valid
          if [[ -f "debian/control" ]]; then
            echo "📋 Current control file dependencies:"
            grep -A 10 "^Depends:" debian/control || true
            echo "✅ Control file verified"
          fi

          # Set branch name for PR
          BRANCH_NAME="auto-update-v${{ steps.version.outputs.clean_version }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Build test package
        if: steps.current.outputs.update_needed == 'true' && github.event.inputs.dry_run != 'true'
        run: |
          echo "🏗️ Building test package..."

          # Create build directory
          mkdir -p build

          # Run package build (test build only, not for distribution)
          if command -v dpkg-buildpackage >/dev/null; then
            dpkg-buildpackage -b -us -uc -tc || {
              echo "⚠️ Package build failed - this may be expected in CI environment"
              echo "build_success=false" >> $GITHUB_OUTPUT
              exit 0
            }
            echo "build_success=true" >> $GITHUB_OUTPUT
            echo "✅ Test package build completed"

            # Move built packages to build directory
            mv ../*.deb build/ 2>/dev/null || true
            mv ../*.changes build/ 2>/dev/null || true
          else
            echo "⚠️ dpkg-buildpackage not available, skipping test build"
            echo "build_success=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate package files
        if: steps.current.outputs.update_needed == 'true' && github.event.inputs.dry_run != 'true'
        run: |
          echo "🧪 Validating package files..."

          # Check changelog format
          if ! dpkg-parsechangelog > /dev/null 2>&1; then
            echo "❌ Changelog format validation failed"
            exit 1
          fi

          # Check control file format
          if ! dpkg-source --parse-format debian/control > /dev/null 2>&1; then
            echo "⚠️ Control file parsing had warnings (may be normal)"
          fi

          # Run lintian if package was built
          if [[ -f build/*.deb ]]; then
            echo "🔍 Running lintian checks..."
            for deb_file in build/*.deb; do
              lintian "$deb_file" || {
                echo "⚠️ Lintian found issues (may not be blockers)"
              }
            done
          fi

          echo "✅ Package validation completed"

      - name: Test package installation
        if: steps.current.outputs.update_needed == 'true' && github.event.inputs.dry_run != 'true' && steps.update.outputs.build_success == 'true'
        run: |
          echo "🧪 Testing package installation in container..."

          # Create simple container test
          cat > test_install.sh << 'EOF'
          #!/bin/bash
          set -e
          echo "Installing dependencies..."
          apt-get update
          apt-get install -y python3 python3-pip

          echo "Installing built package..."
          if [ -f /build/*.deb ]; then
            dpkg -i /build/*.deb || apt-get install -f -y
            echo "✅ Package installed successfully"

            # Basic functionality test
            if command -v rxiv >/dev/null; then
              echo "✅ rxiv command available"
              rxiv --version || echo "⚠️ Version command failed (may be expected)"
            else
              echo "⚠️ rxiv command not found in PATH"
            fi
          else
            echo "⚠️ No .deb package found to test"
          fi
          EOF

          chmod +x test_install.sh

          # Run container test if Docker is available
          if command -v docker >/dev/null; then
            docker run --rm \
              -v "$PWD:/workspace" \
              -v "$PWD/build:/build" \
              -w /workspace \
              ubuntu:22.04 \
              bash test_install.sh || {
                echo "⚠️ Container installation test failed (may be expected in CI)"
              }
          else
            echo "⚠️ Docker not available, skipping container test"
          fi

      - name: Create pull request
        if: steps.current.outputs.update_needed == 'true' && github.event.inputs.dry_run != 'true'
        run: |
          echo "🚀 Creating pull request for package update..."

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create and switch to new branch
          git checkout -b "${{ steps.update.outputs.branch_name }}"

          # Add and commit changes
          git add debian/changelog
          
          # Add any other modified files
          git add debian/ 2>/dev/null || true

          git commit -m "📦 Update package to v${{ steps.version.outputs.clean_version }}

          Automated update triggered by ${{ steps.version.outputs.trigger_source }}
          - Update version: ${{ steps.current.outputs.current_base_version }} → ${{ steps.version.outputs.clean_version }}
          - Debian version: ${{ steps.update.outputs.debian_version }}
          - PyPI package: ${{ steps.version.outputs.pypi_url }}

          Triggered by: ${{ steps.version.outputs.triggered_by }}"

          # Push branch
          git push origin "${{ steps.update.outputs.branch_name }}"

          # Create pull request
          PR_TITLE="📦 Update APT package to v${{ steps.version.outputs.clean_version }}"
          PR_BODY="## 📦 Automated Package Update

          This PR automatically updates the rxiv-maker APT package to version **v${{ steps.version.outputs.clean_version }}**.

          ### Changes
          - ⬆️ **Package Version**: \`${{ steps.current.outputs.current_base_version }}\` → \`${{ steps.version.outputs.clean_version }}\`
          - 📋 **Debian Version**: \`${{ steps.update.outputs.debian_version }}\`
          - 🔗 **PyPI Package**: [${{ steps.version.outputs.pypi_url }}](${{ steps.version.outputs.pypi_url }})

          ### Trigger Information
          - 🎯 **Triggered by**: ${{ steps.version.outputs.triggered_by }}
          - 📡 **Source**: ${{ steps.version.outputs.trigger_source }}
          - 🕐 **Generated**: $(date -Iseconds)

          ### Validation Status
          - ✅ Changelog format validated
          - ✅ Control file checked
          - ${{ steps.pypi.outputs.package_available == 'true' && '✅' || '⚠️' }} PyPI package availability ${{ steps.pypi.outputs.package_available == 'true' && 'confirmed' || 'pending' }}
          - ${{ steps.update.outputs.build_success == 'true' && '✅' || '⚠️' }} Test build ${{ steps.update.outputs.build_success == 'true' && 'successful' || 'skipped/failed' }}

          ### Next Steps
          This PR will trigger container testing workflows to validate the package works correctly across supported Ubuntu versions.

          ### Files Changed
          - \`debian/changelog\` - Updated with new version entry
          - Other Debian packaging files (if modified)

          ---
          🤖 _This PR was automatically generated by the [auto-update-package workflow](https://github.com/HenriquesLab/apt-rxiv-maker/actions/workflows/auto-update-package.yml)_"

          gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --head "${{ steps.update.outputs.branch_name }}" \
            --base main \
            --label "automated" \
            --label "version-update"

          PR_URL=$(gh pr view "${{ steps.update.outputs.branch_name }}" --json url --jq .url)
          echo "✅ Pull request created: $PR_URL"
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT

        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        if: steps.current.outputs.update_needed == 'true' && github.event.inputs.dry_run != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: deb-packages-v${{ steps.version.outputs.clean_version }}
          path: |
            build/*.deb
            build/*.changes
            debian/changelog
          if-no-files-found: ignore
          retention-days: 14

      - name: Generate workflow summary
        if: always()
        run: |
          echo "## 📦 APT Package Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ steps.current.outputs.current_base_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ steps.version.outputs.trigger_source }} (by ${{ steps.version.outputs.triggered_by }})" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            echo "**Mode:** 🧪 Dry Run" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Mode:** 🚀 Production" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.current.outputs.update_needed }}" == "false" ]; then
            echo "### ✅ Result: No Update Needed" >> $GITHUB_STEP_SUMMARY
            echo "The package is already at the requested version." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            echo "### 🧪 Result: Dry Run Completed" >> $GITHUB_STEP_SUMMARY
            echo "Package would be updated from ${{ steps.current.outputs.current_base_version }} to ${{ steps.version.outputs.clean_version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🚀 Result: Package Updated" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Package updated to v${{ steps.version.outputs.clean_version }}" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Debian version: ${{ steps.update.outputs.debian_version }}" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ steps.create_pr.outputs.pr_url }}" ]; then
              echo "- ✅ [Pull request created](${{ steps.create_pr.outputs.pr_url }})" >> $GITHUB_STEP_SUMMARY
            fi
          fi

  # Success gate
  update-success:
    name: ✅ Update Success
    runs-on: ubuntu-latest
    needs: update-package
    if: always()

    steps:
      - name: Report final status
        run: |
          if [ "${{ needs.update-package.result }}" == "success" ]; then
            echo "✅ APT package update completed successfully"
          else
            echo "❌ APT package update failed" 
            echo "📋 Check workflow logs for details"
            exit 1
          fi